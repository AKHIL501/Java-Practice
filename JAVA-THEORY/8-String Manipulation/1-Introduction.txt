
		String Manipulation
				
					Four Classes
					
					1.String Class
					2.String Buffer
					3.String builder
					4.String tokenizer
					
					String:- represents group of characters or character array 	enclosed with double quotes.
					
					
					String vs StringBuffer
					
					Case 1: String and StringBuffer both are final classes both are  present in lang package
					
					Case 2: to create string object we follow two approaches 
					A.without using new operator 
					B.using new operator
							String s1="AKHIL";
							String s2= new String("AKHIL")
							
							StringBuffer sb= new StringBuffer("AKHIL");
							
							Example:-
							
							class Test
							{
							public static void main(String args[])
							{
							
							String s1="AKHIL";
							System.out.println(s1);
							
							String s2= new String("AKHIL");
							System.out.println(s2);
							
							StringBuffer sb= new StringBuffer("AKHIL");
							System.out.println(sb);
							
							{
							}
					
					
					*** without using new keyword that strings are stored in scp memory (String constant pool memory) 
					*** with using new keyword that values are stored in Heap memory.
					
					Example 
					
					String s1="akhil"
					String s2="cse"
					String s3="akhil"
				
				SCP VS Heap
				SCP:-
				1.In scp area if any previous object is already have same data then another object is points to same data,
				if not available it creates new object
				2.no duplicates

				HEAP:-
				1.in heap area it does not check the object it creates new different objects.
				2.It allows duplicates
					
					
				Double equalto operator(==):- it is used to compare two reference variables, it return boolean as a return values
				if two reference variables are same it returns ture otherwise false
				
				s1==s2---->false
				s2==s3----> true
				
				Case 3:
				//immutable
				String s1="Akhil";---------->once we create the string object,modifications are not allowed  that behavior is called immutable nature 
				s1.concat("abothu");
				sop(s1);//Akhil
				
				//mutable nature
				StringBuffer sb=new StringBuffer("Akhil");-->
					sb.append("abothu");
					sop(sb);//Akhilabothu
				
				***Case 4:   (toString()):-	In java we print reference variables it calls toString() method it belongs to object class

					Example:-
					class Test
					{
					public static void main (String args[])
					{
					Test t = new Test();
					System.out.println(t);
					System.out.println(t.toString());//--------> both outputs are same. (Test@17f1ba3) hashcode
					}
					}
					
					javap java.lang.Object
					
					object class implementation for String
					Example 1:-
					class Object
					{
						public String toString()
						{
						return "class-name@hashcode";
						}
						}
						
						hash code is a unique identification number generated by JVM to identify the objects uniquely.
						
						
						
				Example 2:-
				
				public class ToStringMethod2 {

							int eid;
							String ename;

							ToStringMethod2(int eid,String ename)
							{
								this.eid=eid;
								this.ename=ename;
							
							}
							
							//Overriding toString method 
							public String toString()
							{
								return "emp id="+eid+" emp name="+ename;
							}
							
							public static void main(String[] args)
							{
								ToStringMethod2 s =new ToStringMethod2(1,"Akhil");
								System.out.println(s);
							}
							
						}

						Exampl 3:-
						
								public class ToSTringMEthod3 {

									public static void main(String[] args) {
										// TODO Auto-generated method stub

										String s = "Akhil";
										System.out.println(s);
										System.out.println(s.toString());

										StringBuffer sb = new StringBuffer("Akhil");
										System.out.println(sb);
										System.out.println(sb.toString());
										/*
										 * // // class Object { // public String toString() { // return
										 * "class-name@hashcode"; // } // } // // class String extends Object // { //
										 * public String toString() // { // return "String Class Object"; // } // }
										 * 
										 * class StringBuffer extends Object { public String toString() { return
										 * "StringBuffer class Object"; } } }
										 */

									}
								}

						
						
						Case 5 :- (equals())
							 equals() method checks content comparison in string (with out using new keyword), it checks reference comparison
							 in string bulider and new keyword strings.
							 
							 
						Case 6:- Converting String to StringBuffer, StringBuffer to String

							
									public class StbConv {

										public static void main(String[] args) {
											// TODO Auto-generated method stub

											// convertion of string to string buffer

											String str = "akhil";

											StringBuffer sb = new StringBuffer(str);
											System.out.println(sb.reverse());// reverse method is available on StringBuffer
											
											//StringBuffer to String
											StringBuffer sb1 = new StringBuffer("AKhil");
											String ss=sb1.toString(); //toString() available on String Class.
											System.out.println(ss);
										}

									}

									
			equals() and compareTo() 
			
			*** equalsIgnoreCase
			
			equals():- it is presented in object class it refers reference type type in object , string buffer classes
						it refers content type in String class.
						
			CompareTo():-
			1.if two strings are equal it return zero, if not it returns positive or negative values
			2.it based on first string first character unicode value
			3.first string first character is bigger than string string it returns positive value, other wise it returns 
			negative value
			
			example1:-
			
							public class EaC {

					public static void main(String[] args) {

						String s = "Akhil";
						String s2 = "Abhi";
						String s3 = "Akhil";
						// equals()
						System.out.println(s.equals(s2));// false
						System.out.println(s.equals(s3));// true
						System.out.println(s3.equals(s2));// false

						System.out.println("AKHIL".equals("akhil"));// flase
						System.out.println("AKHIL".equalsIgnoreCase("akhil"));// true
						// compareTo()
						System.out.println(s.compareTo(s2));
						System.out.println(s.compareTo(s3));
						System.out.println(s2.compareTo(s3));
						
						System.out.println("AKHIL".compareTo("akhil"));
						System.out.println("AKHIL".compareToIgnoreCase("akhil"));
					}
				}
				
				
				equal() vs Double equal(==)
				
				Double equal(==):- reference comparision
				
				
				length vs length():
				
				length:- used to find the length of the array.
				length();- used to find length of the string
					
					
public class LandL {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int[] a = new int[100];
		System.out.println(a.length);

		String s = "akhil";
		System.out.println(s.length());

		System.out.println(s.charAt(2));

		// System.out.println(s.charAt(20)); //exception

		System.out.println(s.indexOf('a'));
		System.out.println(s.lastIndexOf('l'));

		String rno = "13C51A0501";

		System.out.println(rno.contains("51A"));
		System.out.println(rno.startsWith("13C"));
		System.out.println(rno.endsWith("501"));

		System.out.println(s.toUpperCase());
		System.out.println(s.toLowerCase());

		String s1 = "   Akhil   ";
		System.out.println(s1.length());
		System.out.println(s1.trim().length());

	}

}

			
			
			

			